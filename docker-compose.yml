services:
  cache:
    image: redis:4-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  database:
    image: mysql:8.0-oracle
    ports:
      - "3306:3306"
    volumes:
      - "./docker/database/:/docker-entrypoint-initdb.d/"
      - "./docker/database/mysql:/var/lib/mysql"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: "fleetbase"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  socket:
    image: socketcluster/socketcluster:v17.4.0
    ports:
      - "38000:8000"
    environment:
      SOCKETCLUSTER_WORKERS: 10
      SOCKETCLUSTER_BROKERS: 10

  # Scheduler Service - Development Configuration
  # Builds from local docker/Dockerfile (scheduler-dev target) and mounts ./api for live code changes.
  scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: scheduler-dev
    volumes:
      - ./api:/fleetbase/api
    command: ["go-crond", "--verbose", "root:./crontab"]
    environment:
      DATABASE_URL: "mysql://root@database/fleetbase"
      QUEUE_CONNECTION: redis
      CACHE_DRIVER: redis
      CACHE_PATH: /fleetbase/api/storage/framework/cache
      CACHE_URL: tcp://cache
      REDIS_URL: tcp://cache
    depends_on:
      - database
      - cache

  # Queue Service (Events) - Development Configuration
  # Builds from local docker/Dockerfile (events-dev target) and mounts ./api for live code changes.
  queue:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: events-dev
    volumes:
      - ./api:/fleetbase/api
    command: ["php", "artisan", "queue:work"]
    healthcheck:
      test: ["CMD", "php", "artisan", "queue:status"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      DATABASE_URL: "mysql://root@database/fleetbase"
      QUEUE_CONNECTION: redis
      CACHE_DRIVER: redis
      CACHE_PATH: /fleetbase/api/storage/framework/cache
      CACHE_URL: tcp://cache
      REDIS_URL: tcp://cache
    depends_on:
        - database
        - cache

  # Console UI - Development Configuration
  # Uses Node.js image for Ember development server (ember serve / pnpm start) and mounts ./console for live code changes.
  console:
    image: node:18-alpine
    ports:
      - "4200:4200"
    volumes:
      - ./console:/console
    working_dir: /console
    command: sh -c "pnpm install && pnpm start --port 4200 --host 0.0.0.0"

  # Application API - Development Configuration
  # Builds from local docker/Dockerfile (app-dev target) and mounts ./api for live code changes.
  application:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: app-dev
    volumes:
      - ./api/.env:/fleetbase/api/.env
      - ./api:/fleetbase/api
    environment:
      ENVIRONMENT: development
      DATABASE_URL: "mysql://root@database/fleetbase"
      QUEUE_CONNECTION: redis
      CACHE_DRIVER: redis
      CACHE_PATH: /fleetbase/api/storage/framework/cache
      CACHE_URL: tcp://cache
      REDIS_URL: tcp://cache
      SESSION_DOMAIN: localhost
      BROADCAST_DRIVER: socketcluster
      MAIL_FROM_NAME: Fleetbase
      APP_NAME: Fleetbase
      LOG_CHANNEL: daily
      REGISTRY_HOST: https://registry.fleetbase.io
      REGISTRY_PREINSTALLED_EXTENSIONS: 'true'
      OSRM_HOST: https://router.project-osrm.org
    depends_on:
      - database
      - cache
      - queue

  httpd:
    build:
      context: .
      dockerfile: docker/httpd/Dockerfile
    ports:
      - "8000:80"
    depends_on:
      - application